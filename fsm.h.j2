{% include "license.j2" %}
{% set FSM_PREFIX = PREFIX.upper() %}
{% set fsm_prefix = FSM_PREFIX.lower() %}
#ifndef __{{fsm_prefix}}_fsm_h__
#define __{{fsm_prefix}}_fsm_h__

#include <sys/eventfd.h>
#include <stddef.h>
#include <stdlib.h>
#include <pthread.h>

#include "fsm.h"

#define {{FSM_PREFIX}}_FSM_ST_INITIAL_STATE {{FSM_PREFIX}}_FSM_ST_{{states[0]['State'].upper()}}

enum {{fsm_prefix}}_fsm_states {
	{{FSM_PREFIX}}_FSM_ST_NULL,

{% for state in states %}
	{{FSM_PREFIX}}_FSM_ST_{{state['State'].upper()}},
{% endfor %}

	{{FSM_PREFIX}}_FSM_ST_NUMBER_OF_STATES
};

enum {{fsm_prefix}}_fsm_event_codes {
	{{FSM_PREFIX}}_FSM_EV_NULL,

{% for event in events %}
	{{FSM_PREFIX}}_FSM_EV_{{event.Name.upper()}},
{% endfor %}

	{{FSM_PREFIX}}_FSM_EV_NUMBER_OF_EVENTS
};

{% for pf in processing_functions %}
extern int {{pf}}(struct fsm *fsm);
{% endfor %}

{% for sf in states_functions %}
extern int {{sf}}(struct fsm *fsm);
{% endfor %}

static inline void {{fsm_prefix}}_fsm_init(struct fsm *fsm, void *data)
{
	{% for state in states %}
	static const fsm_process_event_cb {{state['State'].lower()}}_processing_event_table[{{FSM_PREFIX}}_FSM_EV_NUMBER_OF_EVENTS] = {
		{% for processing_pair in processing[state['State']] %}
		[{{FSM_PREFIX}}_FSM_EV_{{processing_pair.Event.upper()}}] = {{processing_pair.Process_Function}},
		{% endfor %}
	};

	static const struct fsm_state {{fsm_prefix}}_fsm_state_{{state['State'].lower()}} = {
		.name = "{{state['State']}}",
		.code = {{FSM_PREFIX}}_FSM_ST_{{state['State'].upper()}},
		.enter = {{ state['Enter_Function'] }},
		.exit = {{ state['Exit_Function'] }},
		.process_event_table = {{state['State'].lower()}}_processing_event_table,
	};
	{% endfor %}

	static const struct fsm_state *{{fsm_prefix}}_fsm_states[] = {
		NULL,
	{% for state in states %}
		&{{fsm_prefix}}_fsm_state_{{state['State'].lower()}},
	{% endfor %}

		NULL,
	};

	static const struct fsm_event {{fsm_prefix}}_fsm_events[] = {
	{% for event in events %}
		[{{FSM_PREFIX}}_FSM_EV_{{event.Name.upper()}}] = {
			.code = {{FSM_PREFIX}}_FSM_EV_{{event.Name.upper()}},
			.name = "{{event.Name}}",
			.description = "{{event.Description}}",
			.notify_level = {{event.Notify_Level}},
		},
	{% endfor %}
	};

	static const enum {{fsm_prefix}}_fsm_states {{fsm_prefix}}_fsm_transition[{{FSM_PREFIX}}_FSM_ST_NUMBER_OF_STATES][{{FSM_PREFIX}}_FSM_EV_NUMBER_OF_EVENTS] = {
	{% for state_name, state in transitions.items() %}
		[{{FSM_PREFIX}}_FSM_ST_{{state_name.upper()}}] = {
		{% for st in state %}
			[{{FSM_PREFIX}}_FSM_EV_{{st.Event.upper()}}] = {{FSM_PREFIX}}_FSM_ST_{{st.New_State.upper()}},
		{% endfor %}
		},
	{% endfor %}
	};


	fsm->name = "{{FSM_PREFIX}}";
	fsm->n_states = {{FSM_PREFIX}}_FSM_ST_NUMBER_OF_STATES;
	fsm->n_events = {{FSM_PREFIX}}_FSM_EV_NUMBER_OF_EVENTS;
	fsm->events = (const struct fsm_event *){{fsm_prefix}}_fsm_events;
	fsm->states = (const struct fsm_state **){{fsm_prefix}}_fsm_states;
	fsm->state = (const struct fsm_state *)fsm->states[{{FSM_PREFIX}}_FSM_ST_INITIAL_STATE];
	fsm->transitions = (const enum fsm_states ***){{fsm_prefix}}_fsm_transition;
	fsm->data = data;
	fsm->state_changed_fd = eventfd(0, EFD_CLOEXEC);
	fsm->fifo_added_fd = eventfd(0, EFD_CLOEXEC | EFD_SEMAPHORE | EFD_NONBLOCK);

	STAILQ_INIT(&fsm->fifo);
	pthread_mutexattr_t attr;
	pthread_mutexattr_init(&attr);
	pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);

	pthread_mutex_init(&fsm->fifo_mutex, &attr);
	pthread_mutex_init(&fsm->locked_fsm, &attr);

	/* Add a NULL event to the FIFO to notify user that he still needs to enter() initial state */
	fsm_fifo_add_event(fsm, NULL);
}

static inline struct fsm_event *{{fsm_prefix}}_fsm_event(struct fsm *fsm, enum {{fsm_prefix}}_fsm_event_codes event)
{
	return (struct fsm_event *)&(fsm->events[event]);
}

static inline struct fsm_event *{{fsm_prefix}}_fsm_event_allocated(struct fsm *fsm, enum {{fsm_prefix}}_fsm_event_codes event, void *user_data, free_data_cb free_data_cb)
{
	struct fsm_event *ev = calloc(1, sizeof(*ev));
	if (!ev)
		return NULL;

	*ev = *{{fsm_prefix}}_fsm_event(fsm, event);
	ev->data = user_data;
	ev->free_data_cb = free_data_cb;
	ev->is_allocated = 1;

	return ev;
}

#endif /* __{{fsm_prefix}}_fsm_h__ */
